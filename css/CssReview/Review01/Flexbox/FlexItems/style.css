h2 {
  text-align: center;
  font-size: 60px;
}

/* order */

/* De forma predeterminada, los elementos flexibles se presentan en el orden de origen. Sin embargo, la orderpropiedad controla el orden en que aparecen en el contenedor flexible. */

/* Los elementos con el mismo orden vuelven al orden de origen. */

.flex__container {
  border: 5px solid black;
  padding: 10px;
  gap: 30px;
}

.flex__item {
  width: 100px;
  font-size: 60px;
  text-align: center;
  background-color: blue;
  color: #fff;
}

.flex__container1 {
  display: flex;
}

.flex__container1 .flex__item1 {
  order: 0; /* default is 0 */
}

.flex__container1 .flex__item2 {
  order: 3;
}

.flex__container1 .flex__item3 {
  order: 4;
}

.flex__container1 .flex__item4 {
  order: 2;
}

/* flex-grow */

/* Esto define la capacidad de crecimiento de un elemento flexible si es necesario. Acepta un valor sin unidades que sirve como proporción. Determina qué cantidad de espacio disponible dentro del contenedor flexible debe ocupar el artículo.

Si todos los elementos se han flex-growestablecido en 1, el espacio restante en el contenedor se distribuirá por igual a todos los niños. Si uno de los hijos tiene un valor de 2, ese hijo ocuparía el doble de espacio que cualquiera de los otros (o lo intentará, al menos). */

/* Los números negativos no son válidos. */

.flex__container2 {
  display: flex;
}

.flex__container2 .flex__item1 {
  flex-grow: 0; /* default is 0 */
}

.flex__container2 .flex__item2 {
  flex-grow: 1;
}

.flex__container2 .flex__item3 {
  flex-grow: 3;
}

.flex__container2 .flex__item4 {
  flex-grow: 2;
}

.flex__container3 {
  display: flex;
}

.flex__container3 .flex__item1,
.flex__container3 .flex__item2,
.flex__container3 .flex__item3 {
  flex-grow: 1;
}

/* flex-shrink */

/* Esto define la capacidad de que un elemento flexible se encoja si es necesario. */

/* Los números negativos no son válidos. */

.flex__container4 {
  display: flex;
}

.flex__container4 .flex__item1,
.flex__container4 .flex__item2,
.flex__container4 .flex__item3 {
  width: 100%;
}

.flex__container4 .flex__item1 {
  flex-shrink: 1; /* default 1 */
}

.flex__container4 .flex__item2 {
  flex-shrink: 3;
}

.flex__container4 .flex__item3 {
  flex-shrink: 2;
}

/* flex-basis */

/* Esto define el tamaño predeterminado de un elemento antes de que se distribuya el espacio restante. 
Puede ser una longitud (por ejemplo, 20 %, 5 rem, etc.) o una palabra clave. 
La autopalabra clave significa "mirar mi propiedad de ancho o alto" (lo cual fue hecho temporalmente por la main-sizepalabra clave hasta que quedó en desuso). 
La palabra clave significa "dimensionarlo en función del contenido del elemento". 
Esta palabra clave aún no es compatible , contentpor lo que es difícil probarla y saber qué hacen sus hermanos .max-contentmin-contentfit-content */

/* Si se establece en 0, el espacio adicional alrededor del contenido no se tiene en cuenta. Si se establece en auto, el espacio adicional se distribuye en función de su flex-growvalor. */

.flex__container5 {
  display: flex;
}

.flex__container5 .flex__item1 {
  flex-basis: 15%;
}

.flex__container5 .flex__item2 {
  flex-basis: 50%;
}

.flex__container5 .flex__item3 {
  flex-basis: 35%;
}

@media (max-width: 768px) {
  .flex__container5 {
    flex-wrap: wrap;
  }

  .flex__container5 .flex__item {
    flex-basis: 100%;
  }
}
