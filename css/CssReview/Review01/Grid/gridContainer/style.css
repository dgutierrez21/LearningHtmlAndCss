.grid__container {
  border: 5px solid black;
  padding: 10px;
}

h2 {
  font-size: 60px;
  text-align: center;
}

.grid__item {
  width: 100px;
  font-size: 50px;
  background-color: blue;
  color: #fff;
  border: 2.5px solid red;
}

/* display: grid; */

/* Define el elemento como un contenedor de cuadrícula y establece un nuevo contexto de formato de cuadrícula para su contenido. */

/* Valores:

grid – genera una grilla a nivel de bloque
inline-grid – genera una cuadrícula de nivel en línea */

.grid__container1 {
  display: grid;
}

.grid__container2 {
  display: inline-grid;
}

/* grid-template-columns
grid-template-rows */

/*
Define las columnas y filas de la cuadrícula con una lista de valores separados por espacios. Los valores representan el tamaño de la pista y el espacio entre ellos representa la línea de cuadrícula.

Valores:

<track-size> – puede ser una longitud, un porcentaje o una fracción del espacio libre en la cuadrícula (usando la  fr unidad)
<line-name> – un nombre arbitrario de su elección */

/* A las líneas de cuadrícula se les asignan automáticamente números positivos a partir de estas asignaciones (siendo -1 una alternativa para la última fila). */

.grid__container3 {
  display: grid;
  grid-template-columns: 150px 250px 1fr;
  grid-template-rows: 150px 250px 350px;
  margin-bottom: 30px;
}

.grid__container4 .grid__item {
  width: auto;
}

/* Pero puede optar por nombrar explícitamente las líneas. Tenga en cuenta la sintaxis de paréntesis para los nombres de línea: */

/* Tenga en cuenta que una línea puede tener más de un nombre. */

.grid__container4 {
  display: grid;
  grid-template-columns: [first] 60px [line2] 50px [line3] auto [col4-start] 50px [five] 80px [end];
  grid-template-rows: [row1-start] 80px [row1-end] 160px [third-line] auto [last-line];
  margin-bottom: 30px;
}

/* Si varias líneas comparten el mismo nombre, se puede hacer referencia a ellas por su nombre de línea y número.

.item {
  grid-column-start: col-start 2;
} */

/* Si su definición contiene partes repetidas, puede usar la  repeat() notación para simplificar las cosas: */

/* La  fr unidad le permite establecer el tamaño de una pista como una fracción del espacio libre del contenedor de cuadrícula. Por ejemplo, esto establecerá cada elemento en un tercio del ancho del contenedor de la cuadrícula: */

/* El espacio libre se calcula  después de  cualquier elemento no flexible. */

.grid__container5 {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  /* Que es equivalente a esto: */
  /* grid-template-columns: 1fr 1fr 1fr; */
  grid-template-rows: repeat(3, 100px);
  /* Que es equivalente a esto: */
  /* grid-template-rows: 100px 100px 100px; */
}

/* grid-template-areas

Define una plantilla de cuadrícula haciendo referencia a los nombres de las áreas de cuadrícula que se especifican con la  grid-area propiedad. Repetir el nombre de un área de cuadrícula hace que el contenido abarque esas celdas. Un punto significa una celda vacía. La sintaxis en sí proporciona una visualización de la estructura de la cuadrícula.

Valores:

<grid-area-name> – el nombre de un área de cuadrícula especificada con grid-area
. – un punto significa una celda de cuadrícula vacía
none – no se definen áreas de cuadrícula */

/* Eso creará una cuadrícula de cuatro columnas de ancho por tres filas de alto. Toda la fila superior estará compuesta por el  área del encabezado  . La fila del medio estará compuesta por dos  áreas principales  , una celda vacía y un  área de barra lateral  . La última fila es todo  pie de página . */

.grid__container6 {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: auto;
  grid-template-areas:
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";
}

.grid__container6 .grid__item {
  width: auto;
  text-align: center;
}

.grid__container6 .grid__item:nth-child(1) {
  grid-area: header;
}
.grid__container6 .grid__item:nth-child(2) {
  grid-area: main;
}
.grid__container6 .grid__item:nth-child(3) {
  grid-area: sidebar;
}
.grid__container6 .grid__item:nth-child(4) {
  grid-area: footer;
}

/* Cada fila de su declaración debe tener el mismo número de celdas.

Puede usar cualquier número de puntos adyacentes para declarar una sola celda vacía. 
Siempre que los puntos no tengan espacios entre ellos, representan una sola celda.

Tenga en cuenta que no está nombrando líneas con esta sintaxis, solo áreas. 
Cuando usa esta sintaxis, las líneas en cada extremo de las áreas en realidad se nombran automáticamente. 
Si el nombre de su área de cuadrícula es  foo , el nombre de la línea de fila inicial y la línea de columna inicial del área será  foo -start , 
y el nombre de su última línea de fila y última línea de columna será  foo -end . 
Esto significa que algunas líneas pueden tener varios nombres, como la línea del extremo izquierdo en el ejemplo anterior, 
que tendrá tres nombres: inicio de encabezado, inicio principal e inicio de pie de página. */

/* grid-template

Una abreviatura para establecer  grid-template-rows,  grid-template-columnsy  grid-template-areas en una sola declaración.

Valores:

none – establece las tres propiedades en sus valores iniciales
<grid-template-rows> /  <grid-template-columns>  – establece  grid-template-columns y  grid-template-rows a los valores especificados, respectivamente, y establece  grid-template-areas a none */

/* Nota: La función repeat() no está permitida en estos listados de pistas, ya que las pistas están pensadas para alinearse visualmente una a una con las filas/columnas en el "arte ASCII". */

.grid__container7 {
  display: grid;
  grid-template:
    "header header header header" 100px
    "main main . sidebar" 100px
    "footer footer footer footer" 100px / 1fr 1fr 1fr 1fr;
}

.grid__container7 .grid__item {
  width: auto;
  text-align: center;
}

.grid__container7 .grid__item:nth-child(1) {
  grid-area: header;
}
.grid__container7 .grid__item:nth-child(2) {
  grid-area: main;
}
.grid__container7 .grid__item:nth-child(3) {
  grid-area: sidebar;
}
.grid__container7 .grid__item:nth-child(4) {
  grid-area: footer;
}

/* Dado  grid-template que no restablece las   propiedades de cuadrícula implícitasgrid-auto-columns ( ,  grid-auto-rowsy  grid-auto-flow), que es probablemente lo que desea hacer en la mayoría de los casos, se recomienda usar la  grid propiedad en lugar de  grid-template. */

/* column-gap
row-gap

cuadrícula
Especifica el tamaño de las líneas de la cuadrícula. Puede pensar en ello como establecer el ancho de los canalones entre las columnas/filas.

Valores:

<line-size> – un valor de longitud */
/* 
.container {
   standard 
  column-gap: 0px;
  row-gap: 0px;

  old 
  grid-column-gap: 0px;
  grid-row-gap: 0px;
  
} 
*/

.grid__container8 .grid__item {
  width: auto;
  text-align: center;
}

.grid__container8 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  column-gap: 30px;
  row-gap: 60px;
}

/* nota: Se eliminará el prefijo grid- y se cambiará el nombre de grid-column-gap y
grid-row-gap por column-gap y row-gap. Las propiedades no prefijadas ya son
compatibles con Chrome 68+,
Safari 11.2 Release 50 + y Opera 54 + .; */

/* gap */

/* Una abreviatura de  row-gap y column-gap

Valores:

<grid-row-gap> <grid-column-gap> – valores de longitud */

.grid__container9 .grid__item {
  width: auto;
  text-align: center;
}

.grid__container9 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 60px 30px;
  margin-bottom: 60px;
}

.grid__container10 .grid__item {
  width: auto;
  text-align: center;
}

.grid__container10 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 60px;
}

/* nota: El prefijo grid- está obsoleto
(pero quién sabe, puede que nunca se elimine de los navegadores) .
Esencialmente,
grid-gap ha sido renombrado como gap. La propiedad no prefijada ya es
compatible con Chrome 68+,
Safari 11.2 Release 50 + y Opera 54 + .; */
/* 
justify-items

justificar-elementos
Alinea los elementos de la cuadrícula a lo largo del  eje en línea (fila)  (a diferencia de  align-items lo que se alinea a lo largo del eje del  bloque (columna)  ). Este valor se aplica a todos los elementos de la cuadrícula dentro del contenedor.

Valores:

start – alinea los elementos para que queden al ras con el borde inicial de su celda
end – alinea los elementos para que queden al ras con el borde final de su celda
center – alinea los elementos en el centro de su celda
stretch – llena todo el ancho de la celda (este es el valor predeterminado) */

.grid__container11 .grid__item,
.grid__container12 .grid__item,
.grid__container13 .grid__item,
.grid__container14 .grid__item {
  width: auto;
}

.grid__container11 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 30px;
  justify-items: stretch; /* default value */
}

.grid__container12 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 30px;
  justify-items: start;
}
.grid__container13 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 30px;
  justify-items: end;
}
.grid__container14 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 30px;
  justify-items: center;
}

/* Este comportamiento también se puede establecer en elementos de cuadrícula individuales a través de la  justify-self propiedad. */

/* align-items

Alinea los elementos de la cuadrícula a lo largo del eje del  bloque (columna)  (a diferencia de  justify-items lo que se alinea a lo largo del  eje en línea (fila)  ). Este valor se aplica a todos los elementos de la cuadrícula dentro del contenedor.

Valores:

stretch – llena toda la altura de la celda (este es el valor predeterminado)
start – alinea los elementos para que queden al ras con el borde inicial de su celda
end – alinea los elementos para que queden al ras con el borde final de su celda
center – alinea los elementos en el centro de su celda
baseline– alinear elementos a lo largo de la línea de base del texto . Hay modificadores que usarán la línea de base de la primera o la última línea en el caso de texto de varias líneas baseline.first baselinelast baseline */

.grid__container15 .grid__item,
.grid__container16 .grid__item,
.grid__container17 .grid__item,
.grid__container18 .grid__item,
.grid__container19 .grid__item {
  width: auto;
}

.grid__container15 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 200px);
  align-items: stretch; /* default value */
}

.grid__container15 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 200px);
  align-items: stretch; /* default value */
}

.grid__container16 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 200px);
  align-items: start;
}

.grid__container17 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 200px);
  align-items: end;
}

.grid__container18 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 200px);
  align-items: center;
}

.grid__container19 .grid__item:nth-child(2),
.grid__container19 .grid__item:nth-child(3) {
  font-size: 120px;
}

.grid__container19 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 200px);
  align-items: baseline;
}

/* Este comportamiento también se puede establecer en elementos de cuadrícula individuales a través de la  align-self propiedad. */

/* place-items */

/* colocar elementos
place-items establece las  propiedades align-items y  justify-items en una sola declaración.

Valores:

<align-items> / <justify-items>  – El primer valor establece  align-items, el segundo valor  justify-items. Si se omite el segundo valor, el primer valor se asigna a ambas propiedades.
Para más detalles, consulte  align-items y  justify-items.

Esto puede ser muy útil para un centrado multidireccional súper rápido: */

.grid__container20 .grid__item {
  width: 100px;
  height: 100px;
}

.grid__container20 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 200px);
  place-items: center;
}
.grid__container21 .grid__item {
  width: 100px;
  height: 100px;
}

.grid__container21 {
  display: grid;
  grid-template-rows: repeat(1, 300px);
  place-items: center;
}

/* justify-content

A veces, el tamaño total de su cuadrícula puede ser menor que el tamaño de su contenedor de cuadrícula. Esto podría suceder si todos los elementos de la cuadrícula tienen el tamaño de unidades no flexibles como  px. En este caso, puede establecer la alineación de la cuadrícula dentro del contenedor de la cuadrícula. Esta propiedad alinea la cuadrícula a lo largo del  eje en línea (fila)  (a diferencia de  align-content lo que alinea la cuadrícula a lo largo del  eje de bloque (columna)  ).

Valores:

start – alinea la cuadrícula para que quede al ras con el borde inicial del contenedor de la cuadrícula
end – alinea la rejilla para que quede al ras con el borde final del contenedor de la rejilla
center – alinea la cuadrícula en el centro del contenedor de la cuadrícula
space-around– coloca una cantidad uniforme de espacio entre cada elemento de la cuadrícula, con espacios de la mitad del tamaño en los extremos
space-between – coloca una cantidad uniforme de espacio entre cada elemento de la cuadrícula, sin espacio en los extremos
space-evenly – coloca una cantidad uniforme de espacio entre cada elemento de la cuadrícula, incluidos los extremos */

.grid__container22 .grid__item,
.grid__container23 .grid__item,
.grid__container24 .grid__item,
.grid__container25 .grid__item,
.grid__container26 .grid__item,
.grid__container27 .grid__item,
.grid__container28 .grid__item {
  width: 100px;
  height: 100px;
}

.grid__container22 {
  display: grid;
  grid-template-columns: repeat(2, 100px);
  justify-content: start; /* default value */
  margin-bottom: 60px;
}

.grid__container23 {
  display: grid;
  grid-template-columns: repeat(2, 100px);
  justify-content: end;
  margin-bottom: 60px;
}

.grid__container24 {
  display: grid;
  grid-template-columns: repeat(2, 100px);
  justify-content: center;
  margin-bottom: 60px;
}

.grid__container25 {
  display: grid;
  grid-template-columns: repeat(2, 100px);
  justify-content: space-evenly;
  margin-bottom: 60px;
}

.grid__container26 {
  display: grid;
  grid-template-columns: repeat(2, 100px);
  justify-content: space-around;
  margin-bottom: 60px;
}

.grid__container27 {
  display: grid;
  grid-template-columns: repeat(2, 100px);
  justify-content: space-between;
}
